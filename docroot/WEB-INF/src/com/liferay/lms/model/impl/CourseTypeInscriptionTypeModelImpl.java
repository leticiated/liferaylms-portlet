/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.CourseTypeInscriptionType;
import com.liferay.lms.model.CourseTypeInscriptionTypeModel;
import com.liferay.lms.model.CourseTypeInscriptionTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CourseTypeInscriptionType service. Represents a row in the &quot;Lms_CourseTypeInscriptionType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.CourseTypeInscriptionTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseTypeInscriptionTypeImpl}.
 * </p>
 *
 * @author TLS
 * @see CourseTypeInscriptionTypeImpl
 * @see com.liferay.lms.model.CourseTypeInscriptionType
 * @see com.liferay.lms.model.CourseTypeInscriptionTypeModel
 * @generated
 */
public class CourseTypeInscriptionTypeModelImpl extends BaseModelImpl<CourseTypeInscriptionType>
	implements CourseTypeInscriptionTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course type inscription type model instance should use the {@link com.liferay.lms.model.CourseTypeInscriptionType} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_CourseTypeInscriptionType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "courseTypeInscriptionTypeId", Types.BIGINT },
			{ "courseTypeId", Types.BIGINT },
			{ "inscriptionType", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_CourseTypeInscriptionType (courseTypeInscriptionTypeId LONG not null primary key,courseTypeId LONG,inscriptionType LONG)";
	public static final String TABLE_SQL_DROP = "drop table Lms_CourseTypeInscriptionType";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.CourseTypeInscriptionType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.CourseTypeInscriptionType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.CourseTypeInscriptionType"),
			true);
	public static long COURSETYPEID_COLUMN_BITMASK = 1L;
	public static long COURSETYPEINSCRIPTIONTYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CourseTypeInscriptionType toModel(
		CourseTypeInscriptionTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CourseTypeInscriptionType model = new CourseTypeInscriptionTypeImpl();

		model.setCourseTypeInscriptionTypeId(soapModel.getCourseTypeInscriptionTypeId());
		model.setCourseTypeId(soapModel.getCourseTypeId());
		model.setInscriptionType(soapModel.getInscriptionType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CourseTypeInscriptionType> toModels(
		CourseTypeInscriptionTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CourseTypeInscriptionType> models = new ArrayList<CourseTypeInscriptionType>(soapModels.length);

		for (CourseTypeInscriptionTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.CourseTypeInscriptionType"));

	public CourseTypeInscriptionTypeModelImpl() {
	}

	public long getPrimaryKey() {
		return _courseTypeInscriptionTypeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCourseTypeInscriptionTypeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_courseTypeInscriptionTypeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CourseTypeInscriptionType.class;
	}

	public String getModelClassName() {
		return CourseTypeInscriptionType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("courseTypeInscriptionTypeId",
			getCourseTypeInscriptionTypeId());
		attributes.put("courseTypeId", getCourseTypeId());
		attributes.put("inscriptionType", getInscriptionType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long courseTypeInscriptionTypeId = (Long)attributes.get(
				"courseTypeInscriptionTypeId");

		if (courseTypeInscriptionTypeId != null) {
			setCourseTypeInscriptionTypeId(courseTypeInscriptionTypeId);
		}

		Long courseTypeId = (Long)attributes.get("courseTypeId");

		if (courseTypeId != null) {
			setCourseTypeId(courseTypeId);
		}

		Long inscriptionType = (Long)attributes.get("inscriptionType");

		if (inscriptionType != null) {
			setInscriptionType(inscriptionType);
		}
	}

	public long getCourseTypeInscriptionTypeId() {
		return _courseTypeInscriptionTypeId;
	}

	public void setCourseTypeInscriptionTypeId(long courseTypeInscriptionTypeId) {
		_columnBitmask |= COURSETYPEINSCRIPTIONTYPEID_COLUMN_BITMASK;

		if (!_setOriginalCourseTypeInscriptionTypeId) {
			_setOriginalCourseTypeInscriptionTypeId = true;

			_originalCourseTypeInscriptionTypeId = _courseTypeInscriptionTypeId;
		}

		_courseTypeInscriptionTypeId = courseTypeInscriptionTypeId;
	}

	public long getOriginalCourseTypeInscriptionTypeId() {
		return _originalCourseTypeInscriptionTypeId;
	}

	public long getCourseTypeId() {
		return _courseTypeId;
	}

	public void setCourseTypeId(long courseTypeId) {
		_columnBitmask |= COURSETYPEID_COLUMN_BITMASK;

		if (!_setOriginalCourseTypeId) {
			_setOriginalCourseTypeId = true;

			_originalCourseTypeId = _courseTypeId;
		}

		_courseTypeId = courseTypeId;
	}

	public long getOriginalCourseTypeId() {
		return _originalCourseTypeId;
	}

	public long getInscriptionType() {
		return _inscriptionType;
	}

	public void setInscriptionType(long inscriptionType) {
		_inscriptionType = inscriptionType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CourseTypeInscriptionType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CourseTypeInscriptionType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CourseTypeInscriptionType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CourseTypeInscriptionTypeImpl courseTypeInscriptionTypeImpl = new CourseTypeInscriptionTypeImpl();

		courseTypeInscriptionTypeImpl.setCourseTypeInscriptionTypeId(getCourseTypeInscriptionTypeId());
		courseTypeInscriptionTypeImpl.setCourseTypeId(getCourseTypeId());
		courseTypeInscriptionTypeImpl.setInscriptionType(getInscriptionType());

		courseTypeInscriptionTypeImpl.resetOriginalValues();

		return courseTypeInscriptionTypeImpl;
	}

	public int compareTo(CourseTypeInscriptionType courseTypeInscriptionType) {
		long primaryKey = courseTypeInscriptionType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CourseTypeInscriptionType courseTypeInscriptionType = null;

		try {
			courseTypeInscriptionType = (CourseTypeInscriptionType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = courseTypeInscriptionType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseTypeInscriptionTypeModelImpl courseTypeInscriptionTypeModelImpl = this;

		courseTypeInscriptionTypeModelImpl._originalCourseTypeInscriptionTypeId = courseTypeInscriptionTypeModelImpl._courseTypeInscriptionTypeId;

		courseTypeInscriptionTypeModelImpl._setOriginalCourseTypeInscriptionTypeId = false;

		courseTypeInscriptionTypeModelImpl._originalCourseTypeId = courseTypeInscriptionTypeModelImpl._courseTypeId;

		courseTypeInscriptionTypeModelImpl._setOriginalCourseTypeId = false;

		courseTypeInscriptionTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseTypeInscriptionType> toCacheModel() {
		CourseTypeInscriptionTypeCacheModel courseTypeInscriptionTypeCacheModel = new CourseTypeInscriptionTypeCacheModel();

		courseTypeInscriptionTypeCacheModel.courseTypeInscriptionTypeId = getCourseTypeInscriptionTypeId();

		courseTypeInscriptionTypeCacheModel.courseTypeId = getCourseTypeId();

		courseTypeInscriptionTypeCacheModel.inscriptionType = getInscriptionType();

		return courseTypeInscriptionTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{courseTypeInscriptionTypeId=");
		sb.append(getCourseTypeInscriptionTypeId());
		sb.append(", courseTypeId=");
		sb.append(getCourseTypeId());
		sb.append(", inscriptionType=");
		sb.append(getInscriptionType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.CourseTypeInscriptionType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>courseTypeInscriptionTypeId</column-name><column-value><![CDATA[");
		sb.append(getCourseTypeInscriptionTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseTypeId</column-name><column-value><![CDATA[");
		sb.append(getCourseTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inscriptionType</column-name><column-value><![CDATA[");
		sb.append(getInscriptionType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CourseTypeInscriptionType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CourseTypeInscriptionType.class
		};
	private long _courseTypeInscriptionTypeId;
	private long _originalCourseTypeInscriptionTypeId;
	private boolean _setOriginalCourseTypeInscriptionTypeId;
	private long _courseTypeId;
	private long _originalCourseTypeId;
	private boolean _setOriginalCourseTypeId;
	private long _inscriptionType;
	private long _columnBitmask;
	private CourseTypeInscriptionType _escapedModelProxy;
}