/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.CourseTypeCalificationType;
import com.liferay.lms.model.CourseTypeCalificationTypeModel;
import com.liferay.lms.model.CourseTypeCalificationTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CourseTypeCalificationType service. Represents a row in the &quot;Lms_CourseTypeCalificationType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.CourseTypeCalificationTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseTypeCalificationTypeImpl}.
 * </p>
 *
 * @author TLS
 * @see CourseTypeCalificationTypeImpl
 * @see com.liferay.lms.model.CourseTypeCalificationType
 * @see com.liferay.lms.model.CourseTypeCalificationTypeModel
 * @generated
 */
public class CourseTypeCalificationTypeModelImpl extends BaseModelImpl<CourseTypeCalificationType>
	implements CourseTypeCalificationTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course type calification type model instance should use the {@link com.liferay.lms.model.CourseTypeCalificationType} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_CourseTypeCalificationType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "courseTypeCalificationTypeId", Types.BIGINT },
			{ "courseTypeId", Types.BIGINT },
			{ "calificationType", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_CourseTypeCalificationType (courseTypeCalificationTypeId LONG not null primary key,courseTypeId LONG,calificationType LONG)";
	public static final String TABLE_SQL_DROP = "drop table Lms_CourseTypeCalificationType";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.CourseTypeCalificationType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.CourseTypeCalificationType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.CourseTypeCalificationType"),
			true);
	public static long COURSETYPECALIFICATIONTYPEID_COLUMN_BITMASK = 1L;
	public static long COURSETYPEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CourseTypeCalificationType toModel(
		CourseTypeCalificationTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CourseTypeCalificationType model = new CourseTypeCalificationTypeImpl();

		model.setCourseTypeCalificationTypeId(soapModel.getCourseTypeCalificationTypeId());
		model.setCourseTypeId(soapModel.getCourseTypeId());
		model.setCalificationType(soapModel.getCalificationType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CourseTypeCalificationType> toModels(
		CourseTypeCalificationTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CourseTypeCalificationType> models = new ArrayList<CourseTypeCalificationType>(soapModels.length);

		for (CourseTypeCalificationTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.CourseTypeCalificationType"));

	public CourseTypeCalificationTypeModelImpl() {
	}

	public long getPrimaryKey() {
		return _courseTypeCalificationTypeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCourseTypeCalificationTypeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_courseTypeCalificationTypeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CourseTypeCalificationType.class;
	}

	public String getModelClassName() {
		return CourseTypeCalificationType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("courseTypeCalificationTypeId",
			getCourseTypeCalificationTypeId());
		attributes.put("courseTypeId", getCourseTypeId());
		attributes.put("calificationType", getCalificationType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long courseTypeCalificationTypeId = (Long)attributes.get(
				"courseTypeCalificationTypeId");

		if (courseTypeCalificationTypeId != null) {
			setCourseTypeCalificationTypeId(courseTypeCalificationTypeId);
		}

		Long courseTypeId = (Long)attributes.get("courseTypeId");

		if (courseTypeId != null) {
			setCourseTypeId(courseTypeId);
		}

		Long calificationType = (Long)attributes.get("calificationType");

		if (calificationType != null) {
			setCalificationType(calificationType);
		}
	}

	public long getCourseTypeCalificationTypeId() {
		return _courseTypeCalificationTypeId;
	}

	public void setCourseTypeCalificationTypeId(
		long courseTypeCalificationTypeId) {
		_columnBitmask |= COURSETYPECALIFICATIONTYPEID_COLUMN_BITMASK;

		if (!_setOriginalCourseTypeCalificationTypeId) {
			_setOriginalCourseTypeCalificationTypeId = true;

			_originalCourseTypeCalificationTypeId = _courseTypeCalificationTypeId;
		}

		_courseTypeCalificationTypeId = courseTypeCalificationTypeId;
	}

	public long getOriginalCourseTypeCalificationTypeId() {
		return _originalCourseTypeCalificationTypeId;
	}

	public long getCourseTypeId() {
		return _courseTypeId;
	}

	public void setCourseTypeId(long courseTypeId) {
		_columnBitmask |= COURSETYPEID_COLUMN_BITMASK;

		if (!_setOriginalCourseTypeId) {
			_setOriginalCourseTypeId = true;

			_originalCourseTypeId = _courseTypeId;
		}

		_courseTypeId = courseTypeId;
	}

	public long getOriginalCourseTypeId() {
		return _originalCourseTypeId;
	}

	public long getCalificationType() {
		return _calificationType;
	}

	public void setCalificationType(long calificationType) {
		_calificationType = calificationType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CourseTypeCalificationType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CourseTypeCalificationType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CourseTypeCalificationType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CourseTypeCalificationTypeImpl courseTypeCalificationTypeImpl = new CourseTypeCalificationTypeImpl();

		courseTypeCalificationTypeImpl.setCourseTypeCalificationTypeId(getCourseTypeCalificationTypeId());
		courseTypeCalificationTypeImpl.setCourseTypeId(getCourseTypeId());
		courseTypeCalificationTypeImpl.setCalificationType(getCalificationType());

		courseTypeCalificationTypeImpl.resetOriginalValues();

		return courseTypeCalificationTypeImpl;
	}

	public int compareTo(CourseTypeCalificationType courseTypeCalificationType) {
		long primaryKey = courseTypeCalificationType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CourseTypeCalificationType courseTypeCalificationType = null;

		try {
			courseTypeCalificationType = (CourseTypeCalificationType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = courseTypeCalificationType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseTypeCalificationTypeModelImpl courseTypeCalificationTypeModelImpl = this;

		courseTypeCalificationTypeModelImpl._originalCourseTypeCalificationTypeId = courseTypeCalificationTypeModelImpl._courseTypeCalificationTypeId;

		courseTypeCalificationTypeModelImpl._setOriginalCourseTypeCalificationTypeId = false;

		courseTypeCalificationTypeModelImpl._originalCourseTypeId = courseTypeCalificationTypeModelImpl._courseTypeId;

		courseTypeCalificationTypeModelImpl._setOriginalCourseTypeId = false;

		courseTypeCalificationTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseTypeCalificationType> toCacheModel() {
		CourseTypeCalificationTypeCacheModel courseTypeCalificationTypeCacheModel =
			new CourseTypeCalificationTypeCacheModel();

		courseTypeCalificationTypeCacheModel.courseTypeCalificationTypeId = getCourseTypeCalificationTypeId();

		courseTypeCalificationTypeCacheModel.courseTypeId = getCourseTypeId();

		courseTypeCalificationTypeCacheModel.calificationType = getCalificationType();

		return courseTypeCalificationTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{courseTypeCalificationTypeId=");
		sb.append(getCourseTypeCalificationTypeId());
		sb.append(", courseTypeId=");
		sb.append(getCourseTypeId());
		sb.append(", calificationType=");
		sb.append(getCalificationType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.CourseTypeCalificationType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>courseTypeCalificationTypeId</column-name><column-value><![CDATA[");
		sb.append(getCourseTypeCalificationTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseTypeId</column-name><column-value><![CDATA[");
		sb.append(getCourseTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calificationType</column-name><column-value><![CDATA[");
		sb.append(getCalificationType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CourseTypeCalificationType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CourseTypeCalificationType.class
		};
	private long _courseTypeCalificationTypeId;
	private long _originalCourseTypeCalificationTypeId;
	private boolean _setOriginalCourseTypeCalificationTypeId;
	private long _courseTypeId;
	private long _originalCourseTypeId;
	private boolean _setOriginalCourseTypeId;
	private long _calificationType;
	private long _columnBitmask;
	private CourseTypeCalificationType _escapedModelProxy;
}